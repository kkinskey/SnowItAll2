package com.example.snowitall.Grade23;

import com.example.snowitall.GiftGlooController;

import com.example.snowitall.PracticeModel;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

import java.io.IOException;

import java.util.Random;


public class PracticeController23 {
    @FXML
    private ImageView bells, strawberries, bowlingpins, butterflies;
    @FXML
    private Label questionText;

    @FXML
    public Button submitButtonFIB;

    @FXML
    public Button nextQuestionButton;
    @FXML
    public Button returnButton;
    @FXML
    public Button nextButton;


    @FXML
    private ImageView correctAnswerImage;
    @FXML
    private ImageView incorrectAnswerImage1;

    @FXML
    private ImageView giftAlert;
    @FXML
    private Label intLabel;

    private final PracticeModel23 model;


    @FXML
    private TextField answer;

    @FXML
    private Button xButton;

    public int reward;

    public PracticeModel23 getModel() {
        return model;
    }


    public PracticeController23() {
        this.model = new PracticeModel23();
    }


    public int getReward() {
        return reward;
    }

    public void setReward(int reward) {
        this.reward = reward;
    }



    // Updates question label text for practice multiple choice questions
    public void updateLabelText(String text) {
        questionText.setText(text);
    }





    public void FillInBlankQuestionGenerator() {
        model.randomQuestion();
    }

    public void handleFIBsubmitButton() {
        System.out.println("This is the correct answer that was generated by the program: " + model.getCorrectAnswer());

        String answerStr = answer.getText().trim();

        System.out.println("This is the answer that the user entered : " + answerStr);

        if (answer!= null && answerStr.equals(model.getCorrectAnswer())) {
            correctAnswerImage.setVisible(true);
            System.out.println("Correct Answer");
            int count = model.getCorrectAnswerCount();
            count++;
            model.setCorrectAnswerCount(count);
            String countString = Integer.toString(model.getCorrectAnswerCount());
            intLabel.setText("Correct Answer Count: " + countString);
            submitButtonFIB.setDisable(true);
            intLabel.setVisible(true);
            nextQuestionButton.setVisible(true);
        } else {
            incorrectAnswerImage1.setVisible(true);
            System.out.println("Incorrect Answer");
            submitButtonFIB.setDisable(true);
            intLabel.setVisible(true);
            nextQuestionButton.setVisible(true);
        }

    }

    @FXML
    public void handleNextFIBQuestionButton() throws Exception{

        //TODO Print out gift snowflakes and model snowflakes and make sure they the same!

        System.out.println("Practice model Snowflakes count: " + model.getCorrectAnswerCount());
        if (model.getCorrectAnswerCount() == 2) {
            giftAlert.setVisible(true);
            xButton.setVisible(true);

//            System.out.println("2 questions answered correctly...  " + controller.getGlooModel().getSnowflakes());
//            System.out.println("gift object in handleNextFIBQuestionButton(): " + controller.getGlooModel().toString());
        }

        answer.clear();
        submitButtonFIB.setDisable(false);
        nextQuestionButton.setVisible(false);
        correctAnswerImage.setVisible(false);
        incorrectAnswerImage1.setVisible(false);

        //generates a new fill in the blank question when next question button is clicked
        FillInBlankQuestionGenerator();

        // Call the setLabelText() method on the controller object
        updateLabelText(model.toStringFIB(model.getOperationSymbol()));

    }
    @FXML
    public void handleXButton() {
        giftAlert.setVisible(false);
        xButton.setVisible(false);
    }

    @FXML
    private void handleGiftGloo(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/snowitall/GiftGloo.fxml"));
        Parent root = loader.load();

        // Get the current stage from the button's scene
        Stage stage = (Stage) ((Node)event.getSource()).getScene().getWindow();

        // Get the controller object
        GiftGlooController controller = loader.getController();

        // Call the setLabelText() method on the controller object
//        controller.updateLabelText(controller.toString());


        // Set the new scene on the stage
        Scene scene = new Scene(root);
        stage.setTitle("Snow It All");
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void returntolandingpageButton(ActionEvent event) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("/com/example/snowitall/landing-page.fxml"));

        // Get the current stage from the button's scene
        Stage stage = (Stage) ((Node)event.getSource()).getScene().getWindow();

        // Set the new scene on the stage
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

    }

    @FXML
    private void returntoopGrade23(ActionEvent event) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("/com/example/snowitall/opGrade23.fxml"));

        // Get the current stage from the button's scene
        Stage stage = (Stage) ((Node)event.getSource()).getScene().getWindow();

        // Set the new scene on the stage
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

    }
    public void randomShapeGenerator() {
        // Make all ImageView instances invisible initially
        bells.setVisible(false);
        strawberries.setVisible(false);
        bowlingpins.setVisible(false);
        butterflies.setVisible(false);

        Random random = new Random();
        int randomNumber = random.nextInt(4) + 1; // Generates a random number between 1 and 4

        switch (randomNumber) {

            case 1 -> {
                bells.setVisible(true);
                System.out.println("bells image displayed");
            }
            case 2 -> {
                strawberries.setVisible(true);
                System.out.println("strawberries image displayed");
            }
            case 3 -> {
                bowlingpins.setVisible(true);
                System.out.println("bowlingpins image displayed");
            }
            case 4 -> {
                butterflies.setVisible(true);
                System.out.println("butterflies image displayed");
            }
            default -> {
            }
        }
    }

    public void setShapeVisibility() {
        bells.setVisible(false);
        strawberries.setVisible(false);
        bowlingpins.setVisible(false);
        butterflies.setVisible(false);
    }

    public void answerCheck() {
        if (bells.isVisible()) {

            // Perform the desired action
            System.out.println("bells is currently displayed");
            model.setCorrectAnswer("11");
        } else if (strawberries.isVisible()) {

            // Perform the desired action
            System.out.println("strawberries is currently displayed");
            model.setCorrectAnswer("8");
        } else if (bowlingpins.isVisible()) {

            // Perform the desired action
            System.out.println("bowlingpins is currently displayed");
            model.setCorrectAnswer("13");
        } else if (butterflies.isVisible()) {

            // Perform the desired action
            System.out.println("butterflies is currently displayed");
            model.setCorrectAnswer("7");
        }else {

            // Perform the desired action
            System.out.println("No ImageView is currently displayed.");
        }
    }
}
